--CREATE tables and related sequences and triggers.
--Address_Type
CREATE TABLE Address_Type
(
  TypeID NUMBER NOT NULL,
  Type_Code VARCHAR2(100) NOT NULL,
  PRIMARY KEY (TypeID)
);

CREATE SEQUENCE ADDRESS_TYPE_SEQ INCREMENT BY 1 START WITH 1 NOCACHE;
CREATE OR REPLACE TRIGGER INSERT_ADDRESS_TYPE_SEQ
BEFORE INSERT ON ADDRESS_TYPE
FOR EACH ROW
DECLARE
new_id number;
BEGIN
SELECT ADDRESS_TYPE_SEQ.nextval INTO new_id FROM dual;
:new.TypeID := new_id;
END;
/
--Region
CREATE TABLE Region
(
  RegionID NUMBER NOT NULL,
  Region_Name VARCHAR2(100) NOT NULL,
  PRIMARY KEY (RegionID)
);

CREATE SEQUENCE REGION_SEQ INCREMENT BY 1 START WITH 1 NOCACHE;
CREATE OR REPLACE TRIGGER INSERT_REGION_SEQ
BEFORE INSERT ON REGION
FOR EACH ROW
DECLARE
new_id number;
BEGIN
SELECT REGION_SEQ.nextval INTO new_id FROM dual;
:new.RegionID := new_id;
END;
/

--Customer
CREATE TABLE CUSTOMER
(
CustomerID NUMBER NOT NULL,
Customer_Name VARCHAR2(100) NOT NULL,
CP_Name VARCHAR2(100) NOT NULL,
Phone VARCHAR2(13) NOT NULL,
Email VARCHAR2(100) NOT NULL,
RegionID NUMBER NOT NULL,
Date_Added DATE,
Date_Updated DATE,
CONSTRAINT CUSTOMER_PK PRIMARY KEY (CustomerID),
CONSTRAINT REGION_CUSTOMER_FK FOREIGN KEY (REGIONID) REFERENCES 
REGION(REGIONID)
);

CREATE SEQUENCE CUSTOMER_SEQ INCREMENT BY 1 START WITH 1 NOCACHE;
CREATE OR REPLACE TRIGGER INSERT_CUSTOMER_SEQ
BEFORE INSERT ON CUSTOMER
FOR EACH ROW
DECLARE
new_id number;
BEGIN
SELECT CUSTOMER_SEQ.nextval INTO new_id FROM dual;
:new.CustomerID := new_id;
END;
/
CREATE OR REPLACE TRIGGER  INSERT_CUSTOMER_Date
BEFORE INSERT ON CUSTOMER
FOR EACH ROW
BEGIN
:NEW.Date_Added := SYSDATE;
END;
/
CREATE OR REPLACE TRIGGER  UPDATE_CUSTOMER_Date
BEFORE UPDATE ON CUSTOMER
FOR EACH ROW
BEGIN
:NEW.Date_Updated := SYSDATE;
END;
/

--Address
CREATE TABLE Address
(
  AddressID NUMBER NOT NULL,
  Street_Address VARCHAR2(100) NOT NULL,
  ZIP_Code VARCHAR2(15) NOT NULL,
  State VARCHAR2(100) NOT NULL,
  City VARCHAR2(100) NOT NULL,
  Country VARCHAR2(100) NOT NULL,
  CustomerID NUMBER NOT NULL,
  TypeID NUMBER NOT NULL,
  PRIMARY KEY (AddressID),
  FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID),
  FOREIGN KEY (TypeID) REFERENCES Address_Type(TypeID)
);

CREATE SEQUENCE ADDRESS_SEQ INCREMENT BY 1 START WITH 1 NOCACHE;
CREATE OR REPLACE TRIGGER INSERT_ADDRESS_SEQ
BEFORE INSERT ON ADDRESS
FOR EACH ROW
DECLARE
new_id number;
BEGIN
SELECT ADDRESS_SEQ.nextval INTO new_id FROM dual;
:new.AddressID := new_id;
END;
/

--Product_Color
CREATE TABLE Product_Color
(
  Color_Name VARCHAR2(100) NOT NULL,
  ColorID NUMBER NOT NULL,
  PRIMARY KEY (ColorID)
);

CREATE SEQUENCE PRODUCT_COLOR_SEQ INCREMENT BY 1 START WITH 1 NOCACHE;
CREATE OR REPLACE TRIGGER INSERT_PRODUCT_COLOR_SEQ
BEFORE INSERT ON PRODUCT_COLOR
FOR EACH ROW
DECLARE
new_id number;
BEGIN
SELECT PRODUCT_COLOR_SEQ.nextval INTO new_id FROM dual;
:new.ColorID := new_id;
END;
/

--Warehouse
CREATE TABLE Warehouse
(
  WarehouseID NUMBER NOT NULL,
  Street_Address VARCHAR2(100) NOT NULL,
  City VARCHAR2(100) NOT NULL,
  State VARCHAR2(100) NOT NULL,
  ZIP_Code VARCHAR2(15) NOT NULL,
  Warehouse_Code VARCHAR2(100) NOT NULL,
  PRIMARY KEY (WarehouseID)
);

CREATE SEQUENCE WAREHOUSE_SEQ INCREMENT BY 1 START WITH 1 NOCACHE;
CREATE OR REPLACE TRIGGER INSERT_WAREHOUSE_SEQ
BEFORE INSERT ON WAREHOUSE
FOR EACH ROW
DECLARE
new_id number;
BEGIN
SELECT WAREHOUSE_SEQ.nextval INTO new_id FROM dual;
:new.WarehouseID := new_id;
END;
/

--Product_Size
CREATE TABLE Product_Size
(
  SizeID NUMBER NOT NULL,
  Product_Size VARCHAR2(100) NOT NULL,
  PRIMARY KEY (SizeID)
);

CREATE SEQUENCE PRODUCT_SIZE_SEQ INCREMENT BY 1 START WITH 1 NOCACHE;
CREATE OR REPLACE TRIGGER INSERT_PRODUCT_SIZE_SEQ
BEFORE INSERT ON PRODUCT_SIZE
FOR EACH ROW
DECLARE
new_id number;
BEGIN
SELECT PRODUCT_SIZE_SEQ.nextval INTO new_id FROM dual;
:new.SizeID := new_id;
END;
/

--Category
CREATE TABLE Category
(
  CategoryID NUMBER NOT NULL,
  Category_Code VARCHAR2(100) NOT NULL,
  Category_Name VARCHAR2(100) NOT NULL,
  PRIMARY KEY (CategoryID)
);

CREATE SEQUENCE CATEGORY_SEQ INCREMENT BY 1 START WITH 1 NOCACHE;
CREATE OR REPLACE TRIGGER INSERT_CATEGORY_SEQ
BEFORE INSERT ON CATEGORY
FOR EACH ROW
DECLARE
new_id number;
BEGIN
SELECT CATEGORY_SEQ.nextval INTO new_id FROM dual;
:new.CategoryID := new_id;
END;
/

--Sales_Transaction
CREATE TABLE Sales_Transaction
(
  TDate DATE NOT NULL,
  TID NUMBER NOT NULL,
  TAmount NUMBER NOT NULL,
  CustomerID NUMBER NOT NULL,
  PRIMARY KEY (TID),
  FOREIGN KEY (CustomerID) REFERENCES Customer(CustomerID)
);

CREATE SEQUENCE Sales_Transaction_SEQ INCREMENT BY 1 START WITH 1 NOCACHE;
CREATE OR REPLACE TRIGGER INSERT_Sales_Transaction_SEQ
BEFORE INSERT ON Sales_Transaction
FOR EACH ROW
DECLARE
new_id number;
BEGIN
SELECT Sales_Transaction_SEQ.nextval INTO new_id FROM dual;
:new.TID := new_id;
END;
/
CREATE OR REPLACE TRIGGER  INSERT_Sales_Transaction_Date
BEFORE INSERT ON Sales_Transaction
FOR EACH ROW
BEGIN
:NEW.TDate := SYSDATE;
END;
/

--Account_Receivable
CREATE TABLE Account_Receivable
(
  PayID NUMBER NOT NULL,
  Date_Due DATE NOT NULL,
  Balance_Due NUMBER NOT NULL,
  Date_Recorded DATE NOT NULL,
  Date_Updated DATE,
  Amount NUMBER NOT NULL,
  TID NUMBER NOT NULL,
  PRIMARY KEY (PayID),
  FOREIGN KEY (TID) REFERENCES Sales_Transaction(TID)
);

CREATE SEQUENCE Account_Receivable_SEQ INCREMENT BY 1 START WITH 1 NOCACHE;
CREATE OR REPLACE TRIGGER INSERT_Account_Receivable_SEQ
BEFORE INSERT ON Account_Receivable
FOR EACH ROW
DECLARE
new_id number;
BEGIN
SELECT Account_Receivable_SEQ.nextval INTO new_id FROM dual;
:new.PayID := new_id;
END;
/
CREATE OR REPLACE TRIGGER  INSERT_Account_Receivable_Date
BEFORE INSERT ON Account_Receivable
FOR EACH ROW
BEGIN
:NEW.Date_Recorded := SYSDATE;
END;
/
CREATE OR REPLACE TRIGGER  UPDATE_Account_Receivable_Date
BEFORE UPDATE ON Account_Receivable
FOR EACH ROW
BEGIN
:NEW.Date_Updated := SYSDATE;
END;
/

--Product_Model
CREATE TABLE Product_Model
(
  ModelID NUMBER NOT NULL,
  Date_Stopped DATE,
  Date_Added DATE NOT NULL,
  Model_Code VARCHAR2(100) NOT NULL,
  CategoryID NUMBER NOT NULL,
  PRIMARY KEY (ModelID),
  FOREIGN KEY (CategoryID) REFERENCES Category(CategoryID)
);

CREATE SEQUENCE Product_Model_SEQ INCREMENT BY 1 START WITH 1 NOCACHE;
CREATE OR REPLACE TRIGGER INSERT_Product_Model_SEQ
BEFORE INSERT ON Product_Model
FOR EACH ROW
DECLARE
new_id number;
BEGIN
SELECT Product_Model_SEQ.nextval INTO new_id FROM dual;
:new.ModelID := new_id;
END;
/
CREATE OR REPLACE TRIGGER  INSERT_Product_Model_Date
BEFORE INSERT ON Product_Model
FOR EACH ROW
BEGIN
:NEW.Date_Added := SYSDATE;
END;
/

--Model_Text
CREATE TABLE Model_Text
(
  TextID NUMBER NOT NULL,
  Start_Date DATE,
  End_Date DATE,
  Description VARCHAR2(100) NOT NULL,
  ModelID NUMBER NOT NULL,
  PRIMARY KEY (TextID),
  FOREIGN KEY (ModelID) REFERENCES Product_Model(ModelID)
);

CREATE SEQUENCE Model_Text_SEQ INCREMENT BY 1 START WITH 1 NOCACHE;
CREATE OR REPLACE TRIGGER INSERT_Model_Text_SEQ
BEFORE INSERT ON Model_Text
FOR EACH ROW
DECLARE
new_id number;
BEGIN
SELECT Model_Text_SEQ.nextval INTO new_id FROM dual;
:new.TextID := new_id;
END;
/

--Product_Built
CREATE TABLE Product_Built
(
  ProductID NUMBER NOT NULL,
  Initial_Price NUMBER NOT NULL,
  OH_Quantity NUMBER NOT NULL,
  ColorID NUMBER NOT NULL,
  SizeID NUMBER NOT NULL,
  ModelID NUMBER NOT NULL,
  PRIMARY KEY (ProductID),
  FOREIGN KEY (ColorID) REFERENCES Product_Color(ColorID),
  FOREIGN KEY (SizeID) REFERENCES Product_Size(SizeID),
  FOREIGN KEY (ModelID) REFERENCES Product_Model(ModelID)
);

CREATE SEQUENCE Product_Built_SEQ INCREMENT BY 1 START WITH 1 NOCACHE;
CREATE OR REPLACE TRIGGER INSERT_Product_Built_SEQ
BEFORE INSERT ON Product_Built
FOR EACH ROW
DECLARE
new_id number;
BEGIN
SELECT Product_Built_SEQ.nextval INTO new_id FROM dual;
:new.ProductID := new_id;
END;
/

--Inventory
CREATE TABLE Inventory
(
  InventoryID NUMBER NOT NULL,
  Aisle_No NUMBER NOT NULL,
  Row_No NUMBER NOT NULL,
  Date_Added DATE NOT NULL,
  Status VARCHAR2(100),
  Serial_No NUMBER NOT NULL,
  WarehouseID NUMBER NOT NULL,
  ProductID NUMBER NOT NULL,
  PRIMARY KEY (InventoryID),
  FOREIGN KEY (WarehouseID) REFERENCES Warehouse(WarehouseID),
  FOREIGN KEY (ProductID) REFERENCES Product_Built(ProductID),
  UNIQUE (Serial_No)
);

CREATE SEQUENCE Inventory_SEQ INCREMENT BY 1 START WITH 1 NOCACHE;
CREATE OR REPLACE TRIGGER INSERT_Inventory_SEQ
BEFORE INSERT ON Inventory
FOR EACH ROW
DECLARE
new_id number;
BEGIN
SELECT Inventory_SEQ.nextval INTO new_id FROM dual;
:new.InventoryID := new_id;
END;
/
CREATE OR REPLACE TRIGGER  INSERT_Inventory_Date
BEFORE INSERT ON Inventory
FOR EACH ROW
BEGIN
:NEW.Date_Added := SYSDATE;
END;
/

--Price
CREATE TABLE Price
(
  PriceID NUMBER NOT NULL,
  Price NUMBER NOT NULL,
  Start_Date DATE NOT NULL,
  Stop_Date DATE,
  Change_Comm VARCHAR2(100),
  InventoryID NUMBER NOT NULL,
  PRIMARY KEY (PriceID),
  FOREIGN KEY (InventoryID) REFERENCES Inventory(InventoryID)
);

CREATE SEQUENCE Price_SEQ INCREMENT BY 1 START WITH 1 NOCACHE;
CREATE OR REPLACE TRIGGER INSERT_Price_SEQ
BEFORE INSERT ON Price
FOR EACH ROW
DECLARE
new_id number;
BEGIN
SELECT Price_SEQ.nextval INTO new_id FROM dual;
:new.PriceID := new_id;
END;
/
CREATE OR REPLACE TRIGGER  INSERT_Price_Date
BEFORE INSERT ON Price
FOR EACH ROW
BEGIN
:NEW.Start_Date := SYSDATE;
END;
/

--Transaction_Line
CREATE TABLE Transaction_Line
(
  Quantity NUMBER NOT NULL,
  Sales_Price NUMBER NOT NULL,
  Discount NUMBER NOT NULL,
  ProductID NUMBER NOT NULL,
  TID NUMBER NOT NULL,
  PRIMARY KEY (ProductID, TID),
  FOREIGN KEY (ProductID) REFERENCES Product_Built(ProductID),
  FOREIGN KEY (TID) REFERENCES Sales_Transaction(TID)
);
